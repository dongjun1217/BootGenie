pipeline {
    agent any

    parameters {
        string(name: 'VERSION_TAG', defaultValue: '', description: 'The version tag of the Docker image to deploy')
    }

    stages {
        stage('Docker Pull') {
            steps {
                script {
                    def dockerImage = "donghyeonshin/boot-genie-app:${params.VERSION_TAG}" // 파라미터로 받은 버전 태그 사용
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'docker_USERNAME', passwordVariable: 'docker_PASSWORD')]) {
                        // docker 레지스트리에 로그인합니다.
                        sh 'echo $docker_PASSWORD | docker login -u $docker_USERNAME --password-stdin'
                        // 최신 Docker 이미지를 가져옵니다.
                        sh "docker pull ${dockerImage}"
                    }
                }
            }
        }

        stage('Prepare Docker Compose') {
            steps {
                script {
                    def composeFile = "boot-genie.yml"
                    def dockerImage = "boot-genie-app:${params.VERSION_TAG}"
                    writeFile file: composeFile, text: """
                    version: '3.8'

                    services:
                      app:
                        image: ${dockerImage}
                        deploy:
                          replicas: 1
                          update_config:
                            parallelism: 2
                            delay: 10s
                          restart_policy:
                            condition: on-failure
                        volumes:
                          - /home/ubuntu/boot-genie/boot-genie-app/bootgenie-https.keystore.p12:/app/boot-genie/bootgenie-https.keystore.p12
                        ports:
                          - "7435:7435"
                        environment:
                          - JAVA_OPTS=-DprojectName=boot-genie
                        logging:
                          driver: json-file
                          options:
                            max-size: "10m"
                            max-file: "3"
                        networks:
                          - app-net

                    networks:
                      app-net:
                        driver: overlay
                    """
                }
            }
        }

        stage('Deploy to Docker Swarm') {
            steps {
                script {
                    def stackName = "boot-genie"
                    def composeFile = "boot-genie.yml"
                    // Docker Swarm에 스택을 배포합니다.
                    sh "docker stack deploy -c ${composeFile} ${stackName}"
                }
            }
        }
    }
}
