node {
    // 환경 변수 설정
    def dockerImage = "110.15.58.113:8083/repository/boot-genie-app:latest"
    def stackName = "boot-genie"
    def composeFile = "boot-genie.yml"

    // Docker Pull 단계: Nexus 레지스트리에서 최신 Docker 이미지를 가져옵니다.
    stage('Docker Pull') {
        withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
            // Nexus 레지스트리에 로그인합니다.
            sh 'echo $NEXUS_PASSWORD | docker login -u $NEXUS_USERNAME --password-stdin http://110.15.58.113:8083'
            // 최신 Docker 이미지를 가져옵니다.
            sh "docker pull ${dockerImage}"
        }
    }

    // Docker Compose 파일 준비 단계
    stage('Prepare Docker Compose') {
        writeFile file: composeFile, text: """
        version: '3.8'

        services:
          app:
            image: ${dockerImage}
            deploy:
              replicas: 1
              update_config:
                parallelism: 2
                delay: 10s
              restart_policy:
                condition: on-failure
            ports:
              - "7435:7435"
            environment:
              - JAVA_OPTS=-DprojectName=boot-genie
            logging:
              driver: json-file
              options:
                max-size: "10m"
                max-file: "3"
            networks:
              - app-net

        networks:
          app-net:
            driver: overlay
        """
    }

    // Deploy 단계: 새로운 버전을 Docker Swarm에 배포합니다.
    stage('Deploy to Docker Swarm') {
        // Docker Swarm에 스택을 배포합니다.
        sh "docker stack deploy -c ${composeFile} ${stackName}"
    }
}
